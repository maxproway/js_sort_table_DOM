{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar table = document.querySelector(\"table\");\nvar tableData = tableToObject(table);\ntable.tHead.addEventListener(\"click\", function(e) {\n    var cellIndex = e.target.cellIndex;\n    var columnName = e.target.innerHTML;\n    var isNumber = isFinite(integerCleaner(table.rows[1].cells[cellIndex].innerHTML));\n    var sortedTableData;\n    if (isNumber) sortedTableData = tableData.sort(function(a, b) {\n        return integerCleaner(a[columnName]) - integerCleaner(b[columnName]);\n    });\n    else sortedTableData = tableData.sort(function(a, b) {\n        var nameA = a[columnName].toUpperCase();\n        var nameB = b[columnName].toUpperCase();\n        if (nameA < nameB) return -1;\n        if (nameA > nameB) return 1;\n        return 0;\n    });\n    var tbody = document.querySelector(\"table tbody\");\n    tbody.innerHTML = \"\";\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = sortedTableData[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var rowData = _step.value;\n            var row = document.createElement(\"tr\");\n            for(var i = 0; i < table.rows[0].cells.length; i++){\n                var cell = document.createElement(\"td\");\n                cell.innerHTML = rowData[table.tHead.rows[0].cells[i].innerHTML];\n                row.append(cell);\n            }\n            tbody.append(row);\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n});\nfunction tableToObject(tableNode) {\n    var tableDataArray = [];\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined, _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n    try {\n        for(var _iterator = tableNode.tBodies[Symbol.iterator](), _step; !(_iteratorNormalCompletion1 = (_step = _iterator.next()).done); _iteratorNormalCompletion1 = true){\n            var tbody = _step.value;\n            try {\n                for(var _iterator1 = tbody.rows[Symbol.iterator](), _step1; !(_iteratorNormalCompletion = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion = true){\n                    var row = _step1.value;\n                    var rowData = {};\n                    for(var i = 0; i < tableNode.rows[0].cells.length; i++)rowData[tableNode.tHead.rows[0].cells[i].innerHTML] = row.cells[i].innerHTML;\n                    tableDataArray.push(rowData);\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally{\n                try {\n                    if (!_iteratorNormalCompletion && _iterator1.return != null) {\n                        _iterator1.return();\n                    }\n                } finally{\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n        }\n    } catch (err) {\n        _didIteratorError1 = true;\n        _iteratorError1 = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion1 && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError1) {\n                throw _iteratorError1;\n            }\n        }\n    }\n    return tableDataArray;\n}\nfunction integerCleaner(salary) {\n    return salary.replaceAll(\"$\", \"\").replaceAll(\",\", \"\");\n}\n\n//# sourceMappingURL=index.50a9c7bf.js.map\n","'use strict';\n\nconst table = document.querySelector('table');\n\nconst tableData = tableToObject(table);\n\ntable.tHead.addEventListener('click', (e) => {\n  const cellIndex = e.target.cellIndex;\n  const columnName = e.target.innerHTML;\n\n  const isNumber = isFinite(\n    integerCleaner(table.rows[1].cells[cellIndex].innerHTML),\n  );\n\n  let sortedTableData;\n\n  if (isNumber) {\n    sortedTableData = tableData.sort(\n      (a, b) => integerCleaner(a[columnName]) - integerCleaner(b[columnName]),\n    );\n  } else {\n    sortedTableData = tableData.sort((a, b) => {\n      const nameA = a[columnName].toUpperCase();\n      const nameB = b[columnName].toUpperCase();\n\n      if (nameA < nameB) {\n        return -1;\n      }\n\n      if (nameA > nameB) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }\n\n  const tbody = document.querySelector('table tbody');\n\n  tbody.innerHTML = '';\n\n  for (const rowData of sortedTableData) {\n    const row = document.createElement('tr');\n\n    for (let i = 0; i < table.rows[0].cells.length; i++) {\n      const cell = document.createElement('td');\n\n      cell.innerHTML = rowData[table.tHead.rows[0].cells[i].innerHTML];\n      row.append(cell);\n    }\n    tbody.append(row);\n  }\n});\n\nfunction tableToObject(tableNode) {\n  const tableDataArray = [];\n\n  for (const tbody of tableNode.tBodies) {\n    for (const row of tbody.rows) {\n      const rowData = {};\n\n      for (let i = 0; i < tableNode.rows[0].cells.length; i++) {\n        rowData[tableNode.tHead.rows[0].cells[i].innerHTML] =\n          row.cells[i].innerHTML;\n      }\n\n      tableDataArray.push(rowData);\n    }\n  }\n\n  return tableDataArray;\n}\n\nfunction integerCleaner(salary) {\n  return salary.replaceAll('$', '').replaceAll(',', '');\n}\n"],"names":["table","document","querySelector","tableData","tableToObject","tableNode","tableDataArray","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step","_iterator","tBodies","Symbol","iterator","next","done","tbody","value","_step1","_iterator1","rows","row","rowData","i","cells","length","tHead","innerHTML","push","err","return","integerCleaner","salary","replaceAll","addEventListener","e","cellIndex","target","columnName","sortedTableData","isFinite","sort","a","b","nameA","toUpperCase","nameB","createElement","cell","append"],"version":3,"file":"index.50a9c7bf.js.map"}